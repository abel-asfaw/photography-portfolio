"""
This type stub file was generated by pyright.
"""

logger = ...
def create_waiter_with_client(waiter_name, waiter_model, client): # -> _:
    """

    :type waiter_name: str
    :param waiter_name: The name of the waiter.  The name should match
        the name (including the casing) of the key name in the waiter
        model file (typically this is CamelCasing).

    :type waiter_model: botocore.waiter.WaiterModel
    :param waiter_model: The model for the waiter configuration.

    :type client: botocore.client.BaseClient
    :param client: The botocore client associated with the service.

    :rtype: botocore.waiter.Waiter
    :return: The waiter object.

    """
    ...

def is_valid_waiter_error(response): # -> bool:
    ...

class NormalizedOperationMethod:
    def __init__(self, client_method) -> None:
        ...
    
    def __call__(self, **kwargs): # -> Any:
        ...
    


class WaiterModel:
    SUPPORTED_VERSION = ...
    def __init__(self, waiter_config) -> None:
        """

        Note that the WaiterModel takes ownership of the waiter_config.
        It may or may not mutate the waiter_config.  If this is a concern,
        it is best to make a copy of the waiter config before passing it to
        the WaiterModel.

        :type waiter_config: dict
        :param waiter_config: The loaded waiter config
            from the <service>*.waiters.json file.  This can be
            obtained from a botocore Loader object as well.

        """
        ...
    
    def get_waiter(self, waiter_name): # -> SingleWaiterConfig:
        ...
    


class SingleWaiterConfig:
    """Represents the waiter configuration for a single waiter.

    A single waiter is considered the configuration for a single
    value associated with a named waiter (i.e TableExists).

    """
    def __init__(self, single_waiter_config) -> None:
        ...
    
    @property
    def acceptors(self): # -> list[Any]:
        ...
    


class AcceptorConfig:
    def __init__(self, config) -> None:
        ...
    
    @property
    def explanation(self): # -> str | LiteralString:
        ...
    


class Waiter:
    def __init__(self, name, config, operation_method) -> None:
        """

        :type name: string
        :param name: The name of the waiter

        :type config: botocore.waiter.SingleWaiterConfig
        :param config: The configuration for the waiter.

        :type operation_method: callable
        :param operation_method: A callable that accepts **kwargs
            and returns a response.  For example, this can be
            a method from a botocore client.

        """
        ...
    
    def wait(self, **kwargs): # -> None:
        ...
    


