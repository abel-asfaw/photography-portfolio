"""
This type stub file was generated by pyright.
"""

from enum import Enum

"""Resolves regions and endpoints.

This module implements endpoint resolution, including resolving endpoints for a
given service and region and resolving the available endpoints for a service
in a specific AWS partition.
"""
LOG = ...
DEFAULT_URI_TEMPLATE = ...
DEFAULT_SERVICE_DATA = ...
class BaseEndpointResolver:
    """Resolves regions and endpoints. Must be subclassed."""
    def construct_endpoint(self, service_name, region_name=...):
        """Resolves an endpoint for a service and region combination.

        :type service_name: string
        :param service_name: Name of the service to resolve an endpoint for
            (e.g., s3)

        :type region_name: string
        :param region_name: Region/endpoint name to resolve (e.g., us-east-1)
            if no region is provided, the first found partition-wide endpoint
            will be used if available.

        :rtype: dict
        :return: Returns a dict containing the following keys:
            - partition: (string, required) Resolved partition name
            - endpointName: (string, required) Resolved endpoint name
            - hostname: (string, required) Hostname to use for this endpoint
            - sslCommonName: (string) sslCommonName to use for this endpoint.
            - credentialScope: (dict) Signature version 4 credential scope
              - region: (string) region name override when signing.
              - service: (string) service name override when signing.
            - signatureVersions: (list<string>) A list of possible signature
              versions, including s3, v4, v2, and s3v4
            - protocols: (list<string>) A list of supported protocols
              (e.g., http, https)
            - ...: Other keys may be included as well based on the metadata
        """
        ...
    
    def get_available_partitions(self):
        """Lists the partitions available to the endpoint resolver.

        :return: Returns a list of partition names (e.g., ["aws", "aws-cn"]).
        """
        ...
    
    def get_available_endpoints(self, service_name, partition_name=..., allow_non_regional=...):
        """Lists the endpoint names of a particular partition.

        :type service_name: string
        :param service_name: Name of a service to list endpoint for (e.g., s3)

        :type partition_name: string
        :param partition_name: Name of the partition to limit endpoints to.
            (e.g., aws for the public AWS endpoints, aws-cn for AWS China
            endpoints, aws-us-gov for AWS GovCloud (US) Endpoints, etc.

        :type allow_non_regional: bool
        :param allow_non_regional: Set to True to include endpoints that are
             not regional endpoints (e.g., s3-external-1,
             fips-us-gov-west-1, etc).
        :return: Returns a list of endpoint names (e.g., ["us-east-1"]).
        """
        ...
    


class EndpointResolver(BaseEndpointResolver):
    """Resolves endpoints based on partition endpoint metadata"""
    _UNSUPPORTED_DUALSTACK_PARTITIONS = ...
    def __init__(self, endpoint_data, uses_builtin_data=...) -> None:
        """
        :type endpoint_data: dict
        :param endpoint_data: A dict of partition data.

        :type uses_builtin_data: boolean
        :param uses_builtin_data: Whether the endpoint data originates in the
            package's data directory.
        """
        ...
    
    def get_service_endpoints_data(self, service_name, partition_name=...): # -> None:
        ...
    
    def get_available_partitions(self): # -> list[Any]:
        ...
    
    def get_available_endpoints(self, service_name, partition_name=..., allow_non_regional=..., endpoint_variant_tags=...): # -> list[Any]:
        ...
    
    def get_partition_dns_suffix(self, partition_name, endpoint_variant_tags=...): # -> None:
        ...
    
    def construct_endpoint(self, service_name, region_name=..., partition_name=..., use_dualstack_endpoint=..., use_fips_endpoint=...): # -> dict[Any, Any] | None:
        ...
    
    def get_partition_for_region(self, region_name):
        ...
    


class EndpointResolverBuiltins(str, Enum):
    AWS_REGION = ...
    AWS_USE_FIPS = ...
    AWS_USE_DUALSTACK = ...
    AWS_STS_USE_GLOBAL_ENDPOINT = ...
    AWS_S3_USE_GLOBAL_ENDPOINT = ...
    AWS_S3_ACCELERATE = ...
    AWS_S3_FORCE_PATH_STYLE = ...
    AWS_S3_USE_ARN_REGION = ...
    AWS_S3CONTROL_USE_ARN_REGION = ...
    AWS_S3_DISABLE_MRAP = ...
    SDK_ENDPOINT = ...


class EndpointRulesetResolver:
    """Resolves endpoints using a service's endpoint ruleset"""
    def __init__(self, endpoint_ruleset_data, partition_data, service_model, builtins, client_context, event_emitter, use_ssl=..., requested_auth_scheme=...) -> None:
        ...
    
    def construct_endpoint(self, operation_model, call_args, request_context): # -> Any:
        """Invokes the provider with params defined in the service's ruleset"""
        ...
    
    def auth_schemes_to_signing_ctx(self, auth_schemes): # -> tuple[Literal['none'], dict[Any, Any]] | tuple[None, dict[Any, Any]] | tuple[Any, dict[Any, Any]]:
        """Convert an Endpoint's authSchemes property to a signing_context dict

        :type auth_schemes: list
        :param auth_schemes: A list of dictionaries taken from the
            ``authSchemes`` property of an Endpoint object returned by
            ``EndpointProvider``.

        :rtype: str, dict
        :return: Tuple of auth type string (to be used in
            ``request_context['auth_type']``) and signing context dict (for use
            in ``request_context['signing']``).
        """
        ...
    
    def ruleset_error_to_botocore_exception(self, ruleset_exception, params): # -> InvalidHostLabelError | UnsupportedS3ConfigurationError | UnsupportedS3AccesspointConfigurationError | ParamValidationError | UnsupportedS3ControlArnError | UnsupportedS3ControlConfigurationError | InvalidEndpointConfigurationError | None:
        """Attempts to translate ruleset errors to pre-existing botocore
        exception types by string matching exception strings.
        """
        ...
    


