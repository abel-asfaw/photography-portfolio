"""
This type stub file was generated by pyright.
"""

import logging
import os
import re

__version__ = ...
class NullHandler(logging.Handler):
    def emit(self, record): # -> None:
        ...
    


log = ...
_INITIALIZERS = ...
_first_cap_regex = ...
_end_cap_regex = ...
_special_case_transform = ...
_xform_cache = ...
ScalarTypes = ...
BOTOCORE_ROOT = ...
class UNSIGNED:
    def __copy__(self): # -> Self:
        ...
    
    def __deepcopy__(self, memodict): # -> Self:
        ...
    


UNSIGNED = ...
def xform_name(name, sep=..., _xform_cache=...):
    """Convert camel case to a "pythonic" name.

    If the name contains the ``sep`` character, then it is
    returned unchanged.

    """
    ...

def register_initializer(callback): # -> None:
    """Register an initializer function for session creation.

    This initializer function will be invoked whenever a new
    `botocore.session.Session` is instantiated.

    :type callback: callable
    :param callback: A callable that accepts a single argument
        of type `botocore.session.Session`.

    """
    ...

def unregister_initializer(callback): # -> None:
    """Unregister an initializer function.

    :type callback: callable
    :param callback: A callable that was previously registered
        with `botocore.register_initializer`.

    :raises ValueError: If a callback is provided that is not currently
        registered as an initializer.

    """
    ...

def invoke_initializers(session): # -> None:
    """Invoke all initializers for a session.

    :type session: botocore.session.Session
    :param session: The session to initialize.

    """
    ...

