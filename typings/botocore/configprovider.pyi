"""
This type stub file was generated by pyright.
"""

"""This module contains the interface for controlling how configuration
is loaded.
"""
logger = ...
BOTOCORE_DEFAUT_SESSION_VARIABLES = ...
DEFAULT_S3_CONFIG_VARS = ...
DEFAULT_PROXIES_CONFIG_VARS = ...
def create_botocore_default_config_mapping(session): # -> dict[Any, Any]:
    ...

class DefaultConfigResolver:
    def __init__(self, default_config_data) -> None:
        ...
    
    def get_default_modes(self): # -> list[str]:
        ...
    
    def get_default_config_values(self, mode):
        ...
    


class ConfigChainFactory:
    """Factory class to create our most common configuration chain case.

    This is a convenience class to construct configuration chains that follow
    our most common pattern. This is to prevent ordering them incorrectly,
    and to make the config chain construction more readable.
    """
    def __init__(self, session, environ=...) -> None:
        """Initialize a ConfigChainFactory.

        :type session: :class:`botocore.session.Session`
        :param session: This is the session that should be used to look up
            values from the config file.

        :type environ: dict
        :param environ: A mapping to use for environment variables. If this
            is not provided it will default to use os.environ.
        """
        ...
    
    def create_config_chain(self, instance_name=..., env_var_names=..., config_property_names=..., default=..., conversion_func=...): # -> ChainProvider:
        """Build a config chain following the standard botocore pattern.

        In botocore most of our config chains follow the the precendence:
        session_instance_variables, environment, config_file, default_value.

        This is a convenience function for creating a chain that follow
        that precendence.

        :type instance_name: str
        :param instance_name: This indicates what session instance variable
            corresponds to this config value. If it is None it will not be
            added to the chain.

        :type env_var_names: str or list of str or None
        :param env_var_names: One or more environment variable names to
            search for this value. They are searched in order. If it is None
            it will not be added to the chain.

        :type config_property_names: str/tuple or list of str/tuple or None
        :param config_property_names: One of more strings or tuples
            representing the name of the key in the config file for this
            config option. They are searched in order. If it is None it will
            not be added to the chain.

        :type default: Any
        :param default: Any constant value to be returned.

        :type conversion_func: None or callable
        :param conversion_func: If this value is None then it has no effect on
            the return type. Otherwise, it is treated as a function that will
            conversion_func our provided type.

        :rvalue: ConfigChain
        :returns: A ConfigChain that resolves in the order env_var_names ->
            config_property_name -> default. Any values that were none are
            omitted form the chain.
        """
        ...
    


class ConfigValueStore:
    """The ConfigValueStore object stores configuration values."""
    def __init__(self, mapping=...) -> None:
        """Initialize a ConfigValueStore.

        :type mapping: dict
        :param mapping: The mapping parameter is a map of string to a subclass
            of BaseProvider. When a config variable is asked for via the
            get_config_variable method, the corresponding provider will be
            invoked to load the value.
        """
        ...
    
    def __deepcopy__(self, memo): # -> ConfigValueStore:
        ...
    
    def __copy__(self): # -> ConfigValueStore:
        ...
    
    def get_config_variable(self, logical_name): # -> None:
        """
        Retrieve the value associeated with the specified logical_name
        from the corresponding provider. If no value is found None will
        be returned.

        :type logical_name: str
        :param logical_name: The logical name of the session variable
            you want to retrieve.  This name will be mapped to the
            appropriate environment variable name for this session as
            well as the appropriate config file entry.

        :returns: value of variable or None if not defined.
        """
        ...
    
    def get_config_provider(self, logical_name): # -> None:
        """
        Retrieve the provider associated with the specified logical_name.
        If no provider is found None will be returned.

        :type logical_name: str
        :param logical_name: The logical name of the session variable
            you want to retrieve.  This name will be mapped to the
            appropriate environment variable name for this session as
            well as the appropriate config file entry.

        :returns: configuration provider or None if not defined.
        """
        ...
    
    def set_config_variable(self, logical_name, value): # -> None:
        """Set a configuration variable to a specific value.

        By using this method, you can override the normal lookup
        process used in ``get_config_variable`` by explicitly setting
        a value.  Subsequent calls to ``get_config_variable`` will
        use the ``value``.  This gives you per-session specific
        configuration values.

        ::
            >>> # Assume logical name 'foo' maps to env var 'FOO'
            >>> os.environ['FOO'] = 'myvalue'
            >>> s.get_config_variable('foo')
            'myvalue'
            >>> s.set_config_variable('foo', 'othervalue')
            >>> s.get_config_variable('foo')
            'othervalue'

        :type logical_name: str
        :param logical_name: The logical name of the session variable
            you want to set.  These are the keys in ``SESSION_VARIABLES``.

        :param value: The value to associate with the config variable.
        """
        ...
    
    def clear_config_variable(self, logical_name): # -> None:
        """Remove an override config variable from the session.

        :type logical_name: str
        :param logical_name: The name of the parameter to clear the override
            value from.
        """
        ...
    
    def set_config_provider(self, logical_name, provider): # -> None:
        """Set the provider for a config value.

        This provides control over how a particular configuration value is
        loaded. This replaces the provider for ``logical_name`` with the new
        ``provider``.

        :type logical_name: str
        :param logical_name: The name of the config value to change the config
            provider for.

        :type provider: :class:`botocore.configprovider.BaseProvider`
        :param provider: The new provider that should be responsible for
            providing a value for the config named ``logical_name``.
        """
        ...
    


class SmartDefaultsConfigStoreFactory:
    def __init__(self, default_config_resolver, imds_region_provider) -> None:
        ...
    
    def merge_smart_defaults(self, config_store, mode, region_name): # -> None:
        ...
    
    def resolve_auto_mode(self, region_name): # -> Literal['in-region', 'cross-region', 'standard']:
        ...
    


class BaseProvider:
    """Base class for configuration value providers.

    A configuration provider has some method of providing a configuration
    value.
    """
    def provide(self):
        """Provide a config value."""
        ...
    


class ChainProvider(BaseProvider):
    """This provider wraps one or more other providers.

    Each provider in the chain is called, the first one returning a non-None
    value is then returned.
    """
    def __init__(self, providers=..., conversion_func=...) -> None:
        """Initalize a ChainProvider.

        :type providers: list
        :param providers: The initial list of providers to check for values
            when invoked.

        :type conversion_func: None or callable
        :param conversion_func: If this value is None then it has no affect on
            the return type. Otherwise, it is treated as a function that will
            transform provided value.
        """
        ...
    
    def __deepcopy__(self, memo): # -> ChainProvider:
        ...
    
    def provide(self): # -> None:
        """Provide the value from the first provider to return non-None.

        Each provider in the chain has its provide method called. The first
        one in the chain to return a non-None value is the returned from the
        ChainProvider. When no non-None value is found, None is returned.
        """
        ...
    
    def set_default_provider(self, default_provider): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class InstanceVarProvider(BaseProvider):
    """This class loads config values from the session instance vars."""
    def __init__(self, instance_var, session) -> None:
        """Initialize InstanceVarProvider.

        :type instance_var: str
        :param instance_var: The instance variable to load from the session.

        :type session: :class:`botocore.session.Session`
        :param session: The botocore session to get the loaded configuration
            file variables from.
        """
        ...
    
    def __deepcopy__(self, memo): # -> InstanceVarProvider:
        ...
    
    def provide(self):
        """Provide a config value from the session instance vars."""
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class ScopedConfigProvider(BaseProvider):
    def __init__(self, config_var_name, session) -> None:
        """Initialize ScopedConfigProvider.

        :type config_var_name: str or tuple
        :param config_var_name: The name of the config variable to load from
            the configuration file. If the value is a tuple, it must only
            consist of two items, where the first item represents the section
            and the second item represents the config var name in the section.

        :type session: :class:`botocore.session.Session`
        :param session: The botocore session to get the loaded configuration
            file variables from.
        """
        ...
    
    def __deepcopy__(self, memo): # -> ScopedConfigProvider:
        ...
    
    def provide(self): # -> None:
        """Provide a value from a config file property."""
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class EnvironmentProvider(BaseProvider):
    """This class loads config values from environment variables."""
    def __init__(self, name, env) -> None:
        """Initialize with the keys in the dictionary to check.

        :type name: str
        :param name: The key with that name will be loaded and returned.

        :type env: dict
        :param env: Environment variables dictionary to get variables from.
        """
        ...
    
    def __deepcopy__(self, memo): # -> EnvironmentProvider:
        ...
    
    def provide(self): # -> None:
        """Provide a config value from a source dictionary."""
        ...
    
    def __repr__(self): # -> str:
        ...
    


class SectionConfigProvider(BaseProvider):
    """Provides a dictionary from a section in the scoped config

    This is useful for retrieving scoped config variables (i.e. s3) that have
    their own set of config variables and resolving logic.
    """
    def __init__(self, section_name, session, override_providers=...) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> SectionConfigProvider:
        ...
    
    def provide(self): # -> dict[Any, Any] | None:
        ...
    
    def set_default_provider(self, key, default_provider): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ConstantProvider(BaseProvider):
    """This provider provides a constant value."""
    def __init__(self, value) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> ConstantProvider:
        ...
    
    def provide(self): # -> Any:
        """Provide the constant value given during initialization."""
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    


class ConfiguredEndpointProvider(BaseProvider):
    """Lookup an endpoint URL from environment variable or shared config file.

    NOTE: This class is considered private and is subject to abrupt breaking
    changes or removal without prior announcement. Please do not use it
    directly.
    """
    _ENDPOINT_URL_LOOKUP_ORDER = ...
    def __init__(self, full_config, scoped_config, client_name, environ=...) -> None:
        """Initialize a ConfiguredEndpointProviderChain.

        :type full_config: dict
        :param full_config: This is the dict representing the full
            configuration file.

        :type scoped_config: dict
        :param scoped_config: This is the dict representing the configuration
            for the current profile for the session.

        :type client_name: str
        :param client_name: The name used to instantiate a client using
            botocore.session.Session.create_client.

        :type environ: dict
        :param environ: A mapping to use for environment variables. If this
            is not provided it will default to use os.environ.
        """
        ...
    
    def provide(self): # -> Any | None:
        """Lookup the configured endpoint URL.

        The order is:

        1. The value provided by a service-specific environment variable.
        2. The value provided by the global endpoint environment variable
           (AWS_ENDPOINT_URL).
        3. The value provided by a service-specific parameter from a services
           definition section in the shared configuration file.
        4. The value provided by the global parameter from a services
           definition section in the shared configuration file.
        """
        ...
    


