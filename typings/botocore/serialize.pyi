"""
This type stub file was generated by pyright.
"""

"""Protocol input serializes.

This module contains classes that implement input serialization
for the various AWS protocol types.

These classes essentially take user input, a model object that
represents what the expected input should look like, and it returns
a dictionary that contains the various parts of a request.  A few
high level design decisions:


* Each protocol type maps to a separate class, all inherit from
  ``Serializer``.
* The return value for ``serialize_to_request`` (the main entry
  point) returns a dictionary that represents a request.  This
  will have keys like ``url_path``, ``query_string``, etc.  This
  is done so that it's a) easy to test and b) not tied to a
  particular HTTP library.  See the ``serialize_to_request`` docstring
  for more details.

Unicode
-------

The input to the serializers should be text (str/unicode), not bytes,
with the exception of blob types.  Those are assumed to be binary,
and if a str/unicode type is passed in, it will be encoded as utf-8.
"""
DEFAULT_TIMESTAMP_FORMAT = ...
ISO8601 = ...
ISO8601_MICRO = ...
HOST_PREFIX_RE = ...
def create_serializer(protocol_name, include_validation=...): # -> ParamValidationDecorator:
    ...

class Serializer:
    DEFAULT_METHOD = ...
    MAP_TYPE = dict
    DEFAULT_ENCODING = ...
    def serialize_to_request(self, parameters, operation_model):
        """Serialize parameters into an HTTP request.

        This method takes user provided parameters and a shape
        model and serializes the parameters to an HTTP request.
        More specifically, this method returns information about
        parts of the HTTP request, it does not enforce a particular
        interface or standard for an HTTP request.  It instead returns
        a dictionary of:

            * 'url_path'
            * 'host_prefix'
            * 'query_string'
            * 'headers'
            * 'body'
            * 'method'

        It is then up to consumers to decide how to map this to a Request
        object of their HTTP library of choice.  Below is an example
        return value::

            {'body': {'Action': 'OperationName',
                      'Bar': 'val2',
                      'Foo': 'val1',
                      'Version': '2014-01-01'},
             'headers': {},
             'method': 'POST',
             'query_string': '',
             'host_prefix': 'value.',
             'url_path': '/'}

        :param parameters: The dictionary input parameters for the
            operation (i.e the user input).
        :param operation_model: The OperationModel object that describes
            the operation.
        """
        ...
    


class QuerySerializer(Serializer):
    TIMESTAMP_FORMAT = ...
    def serialize_to_request(self, parameters, operation_model): # -> dict[str, Any]:
        ...
    


class EC2Serializer(QuerySerializer):
    """EC2 specific customizations to the query protocol serializers.

    The EC2 model is almost, but not exactly, similar to the query protocol
    serializer.  This class encapsulates those differences.  The model
    will have be marked with a ``protocol`` of ``ec2``, so you don't need
    to worry about wiring this class up correctly.

    """
    ...


class JSONSerializer(Serializer):
    TIMESTAMP_FORMAT = ...
    def serialize_to_request(self, parameters, operation_model): # -> dict[str, Any]:
        ...
    


class BaseRestSerializer(Serializer):
    """Base class for rest protocols.

    The only variance between the various rest protocols is the
    way that the body is serialized.  All other aspects (headers, uri, etc.)
    are the same and logic for serializing those aspects lives here.

    Subclasses must implement the ``_serialize_body_params`` method.

    """
    QUERY_STRING_TIMESTAMP_FORMAT = ...
    HEADER_TIMESTAMP_FORMAT = ...
    KNOWN_LOCATIONS = ...
    def serialize_to_request(self, parameters, operation_model): # -> dict[str, Any]:
        ...
    


class RestJSONSerializer(BaseRestSerializer, JSONSerializer):
    ...


class RestXMLSerializer(BaseRestSerializer):
    TIMESTAMP_FORMAT = ...


SERIALIZERS = ...
