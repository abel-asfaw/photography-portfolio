"""
This type stub file was generated by pyright.
"""

from botocore.compat import HAS_CRT
from botocore.response import StreamingBody
from awscrt import checksums as crt_checksums

""" The interfaces in this module are not intended for public use.

This module defines interfaces for applying checksums to HTTP requests within
the context of botocore. This involves both resolving the checksum to be used
based on client configuration and environment, as well as application of the
checksum to the request.
"""
if HAS_CRT:
    ...
else:
    crt_checksums = ...
logger = ...
class BaseChecksum:
    _CHUNK_SIZE = ...
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> None:
        ...
    
    def b64digest(self): # -> str:
        ...
    
    def handle(self, body): # -> str:
        ...
    


class Crc32Checksum(BaseChecksum):
    def __init__(self) -> None:
        ...
    
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> bytes:
        ...
    


class CrtCrc32Checksum(BaseChecksum):
    def __init__(self) -> None:
        ...
    
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> bytes:
        ...
    


class CrtCrc32cChecksum(BaseChecksum):
    def __init__(self) -> None:
        ...
    
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> bytes:
        ...
    


class Sha1Checksum(BaseChecksum):
    def __init__(self) -> None:
        ...
    
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> bytes:
        ...
    


class Sha256Checksum(BaseChecksum):
    def __init__(self) -> None:
        ...
    
    def update(self, chunk): # -> None:
        ...
    
    def digest(self): # -> bytes:
        ...
    


class AwsChunkedWrapper:
    _DEFAULT_CHUNK_SIZE = ...
    def __init__(self, raw, checksum_cls=..., checksum_name=..., chunk_size=...) -> None:
        ...
    
    def seek(self, offset, whence=...): # -> None:
        ...
    
    def read(self, size=...): # -> bytes:
        ...
    
    def __iter__(self): # -> Generator[bytes, Any, None]:
        ...
    


class StreamingChecksumBody(StreamingBody):
    def __init__(self, raw_stream, content_length, checksum, expected) -> None:
        ...
    
    def read(self, amt=...):
        ...
    


def resolve_checksum_context(request, operation_model, params): # -> None:
    ...

def resolve_request_checksum_algorithm(request, operation_model, params, supported_algorithms=...): # -> None:
    ...

def apply_request_checksum(request): # -> None:
    ...

def resolve_response_checksum_algorithms(request, operation_model, params, supported_algorithms=...): # -> None:
    ...

def handle_checksum_body(http_response, response, context, operation_model): # -> None:
    ...

_CHECKSUM_CLS = ...
_CRT_CHECKSUM_ALGORITHMS = ...
if HAS_CRT:
    _CRT_CHECKSUM_CLS = ...
_SUPPORTED_CHECKSUM_ALGORITHMS = ...
_ALGORITHMS_PRIORITY_LIST = ...
