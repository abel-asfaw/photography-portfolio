"""
This type stub file was generated by pyright.
"""

from html.parser import HTMLParser

PRIORITY_PARENT_TAGS = ...
OMIT_NESTED_TAGS = ...
OMIT_SELF_TAGS = ...
HTML_BLOCK_DISPLAY_TAGS = ...
class DocStringParser(HTMLParser):
    """
    A simple HTML parser.  Focused on converting the subset of HTML
    that appears in the documentation strings of the JSON models into
    simple ReST format.
    """
    def __init__(self, doc) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def feed(self, data): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def handle_starttag(self, tag, attrs): # -> None:
        ...
    
    def handle_endtag(self, tag): # -> None:
        ...
    
    def handle_data(self, data): # -> None:
        ...
    


class HTMLTree:
    """
    A tree which handles HTML nodes. Designed to work with a python HTML parser,
    meaning that the current_node will be the most recently opened tag. When
    a tag is closed, the current_node moves up to the parent node.
    """
    def __init__(self, doc) -> None:
        ...
    
    def add_tag(self, tag, attrs=..., is_start=...): # -> None:
        ...
    
    def add_data(self, data): # -> None:
        ...
    
    def write(self): # -> None:
        ...
    


class Node:
    def __init__(self, parent=...) -> None:
        ...
    
    def write(self, doc):
        ...
    


class StemNode(Node):
    def __init__(self, parent=...) -> None:
        ...
    
    def add_child(self, child): # -> None:
        ...
    
    def write(self, doc): # -> None:
        ...
    
    def is_whitespace(self): # -> bool:
        ...
    
    def startswith_whitespace(self): # -> list[Any]:
        ...
    
    def endswith_whitespace(self): # -> list[Any]:
        ...
    
    def lstrip(self): # -> None:
        ...
    
    def rstrip(self): # -> None:
        ...
    
    def collapse_whitespace(self): # -> None:
        """Remove collapsible white-space from HTML.

        HTML in docstrings often contains extraneous white-space around tags,
        for readability. Browsers would collapse this white-space before
        rendering. If not removed before conversion to RST where white-space is
        part of the syntax, for example for indentation, it can result in
        incorrect output.
        """
        ...
    


class TagNode(StemNode):
    """
    A generic Tag node. It will verify that handlers exist before writing.
    """
    def __init__(self, tag, attrs=..., parent=...) -> None:
        ...
    
    def write(self, doc, next_child=...): # -> None:
        ...
    
    def collapse_whitespace(self): # -> None:
        """Remove collapsible white-space.

        All tags collapse internal whitespace. Block-display HTML tags also
        strip all leading and trailing whitespace.

        Approximately follows the specification used in browsers:
        https://www.w3.org/TR/css-text-3/#white-space-rules
        https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace
        """
        ...
    


class DataNode(Node):
    """
    A Node that contains only string data.
    """
    def __init__(self, data, parent=...) -> None:
        ...
    
    @property
    def data(self): # -> str:
        ...
    
    def is_whitespace(self): # -> bool:
        ...
    
    def startswith_whitespace(self): # -> bool:
        ...
    
    def endswith_whitespace(self): # -> bool:
        ...
    
    def lstrip(self): # -> None:
        ...
    
    def rstrip(self): # -> None:
        ...
    
    def collapse_whitespace(self): # -> None:
        """Noop, ``DataNode.write`` always collapses whitespace"""
        ...
    
    def write(self, doc): # -> None:
        ...
    


