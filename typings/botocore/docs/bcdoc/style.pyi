"""
This type stub file was generated by pyright.
"""

logger = ...
PUNCTUATION_CHARACTERS = ...
class BaseStyle:
    def __init__(self, doc, indent_width=...) -> None:
        ...
    
    @property
    def indentation(self): # -> int:
        ...
    
    @indentation.setter
    def indentation(self, value): # -> None:
        ...
    
    def new_paragraph(self): # -> LiteralString:
        ...
    
    def indent(self): # -> None:
        ...
    
    def dedent(self): # -> None:
        ...
    
    def spaces(self): # -> LiteralString:
        ...
    
    def bold(self, s):
        ...
    
    def ref(self, link, title=...):
        ...
    
    def h2(self, s):
        ...
    
    def h3(self, s):
        ...
    
    def underline(self, s):
        ...
    
    def italics(self, s):
        ...
    
    def add_trailing_space_to_previous_write(self): # -> None:
        ...
    


class ReSTStyle(BaseStyle):
    def __init__(self, doc, indent_width=...) -> None:
        ...
    
    def new_paragraph(self): # -> None:
        ...
    
    def new_line(self): # -> None:
        ...
    
    def start_bold(self, attrs=...): # -> None:
        ...
    
    def end_bold(self): # -> None:
        ...
    
    def start_b(self, attrs=...): # -> None:
        ...
    
    def end_b(self): # -> None:
        ...
    
    def bold(self, s): # -> None:
        ...
    
    def ref(self, title, link=...): # -> None:
        ...
    
    def h1(self, s): # -> None:
        ...
    
    def h2(self, s): # -> None:
        ...
    
    def h3(self, s): # -> None:
        ...
    
    def start_italics(self, attrs=...): # -> None:
        ...
    
    def end_italics(self): # -> None:
        ...
    
    def italics(self, s): # -> None:
        ...
    
    def start_p(self, attrs=...): # -> None:
        ...
    
    def end_p(self): # -> None:
        ...
    
    def start_code(self, attrs=...): # -> None:
        ...
    
    def end_code(self): # -> None:
        ...
    
    def code(self, s): # -> None:
        ...
    
    def start_note(self, attrs=...): # -> None:
        ...
    
    def end_note(self): # -> None:
        ...
    
    def start_important(self, attrs=...): # -> None:
        ...
    
    def end_important(self): # -> None:
        ...
    
    def start_danger(self, attrs=...): # -> None:
        ...
    
    def end_danger(self): # -> None:
        ...
    
    def start_a(self, attrs=...): # -> None:
        ...
    
    def link_target_definition(self, refname, link): # -> None:
        ...
    
    def sphinx_reference_label(self, label, text=...): # -> None:
        ...
    
    def end_a(self, next_child=...): # -> None:
        ...
    
    def start_i(self, attrs=...): # -> None:
        ...
    
    def end_i(self): # -> None:
        ...
    
    def start_li(self, attrs=...): # -> None:
        ...
    
    def end_li(self): # -> None:
        ...
    
    def li(self, s): # -> None:
        ...
    
    def start_ul(self, attrs=...): # -> None:
        ...
    
    def end_ul(self): # -> None:
        ...
    
    def start_ol(self, attrs=...): # -> None:
        ...
    
    def end_ol(self): # -> None:
        ...
    
    def start_examples(self, attrs=...): # -> None:
        ...
    
    def end_examples(self): # -> None:
        ...
    
    def start_fullname(self, attrs=...): # -> None:
        ...
    
    def end_fullname(self): # -> None:
        ...
    
    def start_codeblock(self, attrs=...): # -> None:
        ...
    
    def end_codeblock(self): # -> None:
        ...
    
    def codeblock(self, code): # -> None:
        """
        Literal code blocks are introduced by ending a paragraph with
        the special marker ::.  The literal block must be indented
        (and, like all paragraphs, separated from the surrounding
        ones by blank lines).
        """
        ...
    
    def toctree(self): # -> None:
        ...
    
    def tocitem(self, item, file_name=...): # -> None:
        ...
    
    def hidden_toctree(self): # -> None:
        ...
    
    def hidden_tocitem(self, item): # -> None:
        ...
    
    def table_of_contents(self, title=..., depth=...): # -> None:
        ...
    
    def start_sphinx_py_class(self, class_name): # -> None:
        ...
    
    def end_sphinx_py_class(self): # -> None:
        ...
    
    def start_sphinx_py_method(self, method_name, parameters=...): # -> None:
        ...
    
    def end_sphinx_py_method(self): # -> None:
        ...
    
    def start_sphinx_py_attr(self, attr_name): # -> None:
        ...
    
    def end_sphinx_py_attr(self): # -> None:
        ...
    
    def write_py_doc_string(self, docstring): # -> None:
        ...
    
    def external_link(self, title, link): # -> None:
        ...
    
    def internal_link(self, title, page): # -> None:
        ...
    


