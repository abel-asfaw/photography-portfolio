"""
This type stub file was generated by pyright.
"""

logger = ...
ReadOnlyCredentials = ...
_DEFAULT_MANDATORY_REFRESH_TIMEOUT = ...
_DEFAULT_ADVISORY_REFRESH_TIMEOUT = ...
def create_credential_resolver(session, cache=..., region_name=...): # -> CredentialResolver:
    """Create a default credential resolver.

    This creates a pre-configured credential resolver
    that includes the default lookup chain for
    credentials.

    """
    ...

class ProfileProviderBuilder:
    """This class handles the creation of profile based providers.

    NOTE: This class is only intended for internal use.

    This class handles the creation and ordering of the various credential
    providers that primarly source their configuration from the shared config.
    This is needed to enable sharing between the default credential chain and
    the source profile chain created by the assume role provider.
    """
    def __init__(self, session, cache=..., region_name=..., sso_token_cache=...) -> None:
        ...
    
    def providers(self, profile_name, disable_env_vars=...): # -> list[Any]:
        ...
    


def get_credentials(session): # -> None:
    ...

def create_assume_role_refresher(client, params): # -> Callable[[], dict[str, Any]]:
    ...

def create_mfa_serial_refresher(actual_refresh): # -> _Refresher:
    class _Refresher:
        ...
    
    

class Credentials:
    """
    Holds the credentials needed to authenticate requests.

    :param str access_key: The access key part of the credentials.
    :param str secret_key: The secret key part of the credentials.
    :param str token: The security token, valid only for session credentials.
    :param str method: A string which identifies where the credentials
        were found.
    """
    def __init__(self, access_key, secret_key, token=..., method=...) -> None:
        ...
    
    def get_frozen_credentials(self): # -> ReadOnlyCredentials:
        ...
    


class RefreshableCredentials(Credentials):
    """
    Holds the credentials needed to authenticate requests. In addition, it
    knows how to refresh itself.

    :param str access_key: The access key part of the credentials.
    :param str secret_key: The secret key part of the credentials.
    :param str token: The security token, valid only for session credentials.
    :param datetime expiry_time: The expiration time of the credentials.
    :param function refresh_using: Callback function to refresh the credentials.
    :param str method: A string which identifies where the credentials
        were found.
    :param function time_fetcher: Callback function to retrieve current time.
    """
    _advisory_refresh_timeout = ...
    _mandatory_refresh_timeout = ...
    def __init__(self, access_key, secret_key, token, expiry_time, refresh_using, method, time_fetcher=...) -> None:
        ...
    
    @classmethod
    def create_from_metadata(cls, metadata, refresh_using, method): # -> Self:
        ...
    
    @property
    def access_key(self): # -> Any:
        """Warning: Using this property can lead to race conditions if you
        access another property subsequently along the refresh boundary.
        Please use get_frozen_credentials instead.
        """
        ...
    
    @access_key.setter
    def access_key(self, value): # -> None:
        ...
    
    @property
    def secret_key(self): # -> Any:
        """Warning: Using this property can lead to race conditions if you
        access another property subsequently along the refresh boundary.
        Please use get_frozen_credentials instead.
        """
        ...
    
    @secret_key.setter
    def secret_key(self, value): # -> None:
        ...
    
    @property
    def token(self): # -> Any:
        """Warning: Using this property can lead to race conditions if you
        access another property subsequently along the refresh boundary.
        Please use get_frozen_credentials instead.
        """
        ...
    
    @token.setter
    def token(self, value): # -> None:
        ...
    
    def refresh_needed(self, refresh_in=...): # -> bool:
        """Check if a refresh is needed.

        A refresh is needed if the expiry time associated
        with the temporary credentials is less than the
        provided ``refresh_in``.  If ``time_delta`` is not
        provided, ``self.advisory_refresh_needed`` will be used.

        For example, if your temporary credentials expire
        in 10 minutes and the provided ``refresh_in`` is
        ``15 * 60``, then this function will return ``True``.

        :type refresh_in: int
        :param refresh_in: The number of seconds before the
            credentials expire in which refresh attempts should
            be made.

        :return: True if refresh needed, False otherwise.

        """
        ...
    
    def get_frozen_credentials(self): # -> ReadOnlyCredentials:
        """Return immutable credentials.

        The ``access_key``, ``secret_key``, and ``token`` properties
        on this class will always check and refresh credentials if
        needed before returning the particular credentials.

        This has an edge case where you can get inconsistent
        credentials.  Imagine this:

            # Current creds are "t1"
            tmp.access_key  ---> expired? no, so return t1.access_key
            # ---- time is now expired, creds need refreshing to "t2" ----
            tmp.secret_key  ---> expired? yes, refresh and return t2.secret_key

        This means we're using the access key from t1 with the secret key
        from t2.  To fix this issue, you can request a frozen credential object
        which is guaranteed not to change.

        The frozen credentials returned from this method should be used
        immediately and then discarded.  The typical usage pattern would
        be::

            creds = RefreshableCredentials(...)
            some_code = SomeSignerObject()
            # I'm about to sign the request.
            # The frozen credentials are only used for the
            # duration of generate_presigned_url and will be
            # immediately thrown away.
            request = some_code.sign_some_request(
                with_credentials=creds.get_frozen_credentials())
            print("Signed request:", request)

        """
        ...
    


class DeferredRefreshableCredentials(RefreshableCredentials):
    """Refreshable credentials that don't require initial credentials.

    refresh_using will be called upon first access.
    """
    def __init__(self, refresh_using, method, time_fetcher=...) -> None:
        ...
    
    def refresh_needed(self, refresh_in=...): # -> bool:
        ...
    


class CachedCredentialFetcher:
    DEFAULT_EXPIRY_WINDOW_SECONDS = ...
    def __init__(self, cache=..., expiry_window_seconds=...) -> None:
        ...
    
    def fetch_credentials(self): # -> dict[str, Any]:
        ...
    


class BaseAssumeRoleCredentialFetcher(CachedCredentialFetcher):
    def __init__(self, client_creator, role_arn, extra_args=..., cache=..., expiry_window_seconds=...) -> None:
        ...
    


class AssumeRoleCredentialFetcher(BaseAssumeRoleCredentialFetcher):
    def __init__(self, client_creator, source_credentials, role_arn, extra_args=..., mfa_prompter=..., cache=..., expiry_window_seconds=...) -> None:
        """
        :type client_creator: callable
        :param client_creator: A callable that creates a client taking
            arguments like ``Session.create_client``.

        :type source_credentials: Credentials
        :param source_credentials: The credentials to use to create the
            client for the call to AssumeRole.

        :type role_arn: str
        :param role_arn: The ARN of the role to be assumed.

        :type extra_args: dict
        :param extra_args: Any additional arguments to add to the assume
            role request using the format of the botocore operation.
            Possible keys include, but may not be limited to,
            DurationSeconds, Policy, SerialNumber, ExternalId and
            RoleSessionName.

        :type mfa_prompter: callable
        :param mfa_prompter: A callable that returns input provided by the
            user (i.e raw_input, getpass.getpass, etc.).

        :type cache: dict
        :param cache: An object that supports ``__getitem__``,
            ``__setitem__``, and ``__contains__``.  An example of this is
            the ``JSONFileCache`` class in aws-cli.

        :type expiry_window_seconds: int
        :param expiry_window_seconds: The amount of time, in seconds,
        """
        ...
    


class AssumeRoleWithWebIdentityCredentialFetcher(BaseAssumeRoleCredentialFetcher):
    def __init__(self, client_creator, web_identity_token_loader, role_arn, extra_args=..., cache=..., expiry_window_seconds=...) -> None:
        """
        :type client_creator: callable
        :param client_creator: A callable that creates a client taking
            arguments like ``Session.create_client``.

        :type web_identity_token_loader: callable
        :param web_identity_token_loader: A callable that takes no arguments
        and returns a web identity token str.

        :type role_arn: str
        :param role_arn: The ARN of the role to be assumed.

        :type extra_args: dict
        :param extra_args: Any additional arguments to add to the assume
            role request using the format of the botocore operation.
            Possible keys include, but may not be limited to,
            DurationSeconds, Policy, SerialNumber, ExternalId and
            RoleSessionName.

        :type cache: dict
        :param cache: An object that supports ``__getitem__``,
            ``__setitem__``, and ``__contains__``.  An example of this is
            the ``JSONFileCache`` class in aws-cli.

        :type expiry_window_seconds: int
        :param expiry_window_seconds: The amount of time, in seconds,
        """
        ...
    


class CredentialProvider:
    METHOD = ...
    CANONICAL_NAME = ...
    def __init__(self, session=...) -> None:
        ...
    
    def load(self): # -> Literal[True]:
        """
        Loads the credentials from their source & sets them on the object.

        Subclasses should implement this method (by reading from disk, the
        environment, the network or wherever), returning ``True`` if they were
        found & loaded.

        If not found, this method should return ``False``, indictating that the
        ``CredentialResolver`` should fall back to the next available method.

        The default implementation does nothing, assuming the user has set the
        ``access_key/secret_key/token`` themselves.

        :returns: Whether credentials were found & set
        :rtype: Credentials
        """
        ...
    


class ProcessProvider(CredentialProvider):
    METHOD = ...
    def __init__(self, profile_name, load_config, popen=...) -> None:
        ...
    
    def load(self): # -> RefreshableCredentials | Credentials | None:
        ...
    


class InstanceMetadataProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    def __init__(self, iam_role_fetcher) -> None:
        ...
    
    def load(self): # -> RefreshableCredentials | None:
        ...
    


class EnvProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    ACCESS_KEY = ...
    SECRET_KEY = ...
    TOKENS = ...
    EXPIRY_TIME = ...
    def __init__(self, environ=..., mapping=...) -> None:
        """

        :param environ: The environment variables (defaults to
            ``os.environ`` if no value is provided).
        :param mapping: An optional mapping of variable names to
            environment variable names.  Use this if you want to
            change the mapping of access_key->AWS_ACCESS_KEY_ID, etc.
            The dict can have up to 3 keys: ``access_key``, ``secret_key``,
            ``session_token``.
        """
        ...
    
    def load(self): # -> RefreshableCredentials | Credentials | None:
        """
        Search for credentials in explicit environment variables.
        """
        ...
    


class OriginalEC2Provider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    CRED_FILE_ENV = ...
    ACCESS_KEY = ...
    SECRET_KEY = ...
    def __init__(self, environ=..., parser=...) -> None:
        ...
    
    def load(self): # -> Credentials | None:
        """
        Search for a credential file used by original EC2 CLI tools.
        """
        ...
    


class SharedCredentialProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    ACCESS_KEY = ...
    SECRET_KEY = ...
    TOKENS = ...
    def __init__(self, creds_filename, profile_name=..., ini_parser=...) -> None:
        ...
    
    def load(self): # -> Credentials | None:
        ...
    


class ConfigProvider(CredentialProvider):
    """INI based config provider with profile sections."""
    METHOD = ...
    CANONICAL_NAME = ...
    ACCESS_KEY = ...
    SECRET_KEY = ...
    TOKENS = ...
    def __init__(self, config_filename, profile_name, config_parser=...) -> None:
        """

        :param config_filename: The session configuration scoped to the current
            profile.  This is available via ``session.config``.
        :param profile_name: The name of the current profile.
        :param config_parser: A config parser callable.

        """
        ...
    
    def load(self): # -> Credentials | None:
        """
        If there is are credentials in the configuration associated with
        the session, use those.
        """
        ...
    


class BotoProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    BOTO_CONFIG_ENV = ...
    DEFAULT_CONFIG_FILENAMES = ...
    ACCESS_KEY = ...
    SECRET_KEY = ...
    def __init__(self, environ=..., ini_parser=...) -> None:
        ...
    
    def load(self): # -> Credentials | None:
        """
        Look for credentials in boto config file.
        """
        ...
    


class AssumeRoleProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    ROLE_CONFIG_VAR = ...
    WEB_IDENTITY_TOKE_FILE_VAR = ...
    EXPIRY_WINDOW_SECONDS = ...
    def __init__(self, load_config, client_creator, cache, profile_name, prompter=..., credential_sourcer=..., profile_provider_builder=...) -> None:
        """
        :type load_config: callable
        :param load_config: A function that accepts no arguments, and
            when called, will return the full configuration dictionary
            for the session (``session.full_config``).

        :type client_creator: callable
        :param client_creator: A factory function that will create
            a client when called.  Has the same interface as
            ``botocore.session.Session.create_client``.

        :type cache: dict
        :param cache: An object that supports ``__getitem__``,
            ``__setitem__``, and ``__contains__``.  An example
            of this is the ``JSONFileCache`` class in the CLI.

        :type profile_name: str
        :param profile_name: The name of the profile.

        :type prompter: callable
        :param prompter: A callable that returns input provided
            by the user (i.e raw_input, getpass.getpass, etc.).

        :type credential_sourcer: CanonicalNameCredentialSourcer
        :param credential_sourcer: A credential provider that takes a
            configuration, which is used to provide the source credentials
            for the STS call.
        """
        ...
    
    def load(self): # -> DeferredRefreshableCredentials | None:
        ...
    


class AssumeRoleWithWebIdentityProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    _CONFIG_TO_ENV_VAR = ...
    def __init__(self, load_config, client_creator, profile_name, cache=..., disable_env_vars=..., token_loader_cls=...) -> None:
        ...
    
    def load(self): # -> DeferredRefreshableCredentials | None:
        ...
    


class CanonicalNameCredentialSourcer:
    def __init__(self, providers) -> None:
        ...
    
    def is_supported(self, source_name): # -> bool:
        """Validates a given source name.

        :type source_name: str
        :param source_name: The value of credential_source in the config
            file. This is the canonical name of the credential provider.

        :rtype: bool
        :returns: True if the credential provider is supported,
            False otherwise.
        """
        ...
    
    def source_credentials(self, source_name): # -> None:
        """Loads source credentials based on the provided configuration.

        :type source_name: str
        :param source_name: The value of credential_source in the config
            file. This is the canonical name of the credential provider.

        :rtype: Credentials
        """
        ...
    


class ContainerProvider(CredentialProvider):
    METHOD = ...
    CANONICAL_NAME = ...
    ENV_VAR = ...
    ENV_VAR_FULL = ...
    ENV_VAR_AUTH_TOKEN = ...
    ENV_VAR_AUTH_TOKEN_FILE = ...
    def __init__(self, environ=..., fetcher=...) -> None:
        ...
    
    def load(self): # -> RefreshableCredentials | None:
        ...
    


class CredentialResolver:
    def __init__(self, providers) -> None:
        """

        :param providers: A list of ``CredentialProvider`` instances.

        """
        ...
    
    def insert_before(self, name, credential_provider): # -> None:
        """
        Inserts a new instance of ``CredentialProvider`` into the chain that
        will be tried before an existing one.

        :param name: The short name of the credentials you'd like to insert the
            new credentials before. (ex. ``env`` or ``config``). Existing names
            & ordering can be discovered via ``self.available_methods``.
        :type name: string

        :param cred_instance: An instance of the new ``Credentials`` object
            you'd like to add to the chain.
        :type cred_instance: A subclass of ``Credentials``
        """
        ...
    
    def insert_after(self, name, credential_provider): # -> None:
        """
        Inserts a new type of ``Credentials`` instance into the chain that will
        be tried after an existing one.

        :param name: The short name of the credentials you'd like to insert the
            new credentials after. (ex. ``env`` or ``config``). Existing names
            & ordering can be discovered via ``self.available_methods``.
        :type name: string

        :param cred_instance: An instance of the new ``Credentials`` object
            you'd like to add to the chain.
        :type cred_instance: A subclass of ``Credentials``
        """
        ...
    
    def remove(self, name): # -> None:
        """
        Removes a given ``Credentials`` instance from the chain.

        :param name: The short name of the credentials instance to remove.
        :type name: string
        """
        ...
    
    def get_provider(self, name):
        """Return a credential provider by name.

        :type name: str
        :param name: The name of the provider.

        :raises UnknownCredentialError: Raised if no
            credential provider by the provided name
            is found.
        """
        ...
    
    def load_credentials(self): # -> None:
        """
        Goes through the credentials chain, returning the first ``Credentials``
        that could be loaded.
        """
        ...
    


class SSOCredentialFetcher(CachedCredentialFetcher):
    _UTC_DATE_FORMAT = ...
    def __init__(self, start_url, sso_region, role_name, account_id, client_creator, token_loader=..., cache=..., expiry_window_seconds=..., token_provider=..., sso_session_name=...) -> None:
        ...
    


class SSOProvider(CredentialProvider):
    METHOD = ...
    _SSO_TOKEN_CACHE_DIR = ...
    _PROFILE_REQUIRED_CONFIG_VARS = ...
    _SSO_REQUIRED_CONFIG_VARS = ...
    _ALL_REQUIRED_CONFIG_VARS = ...
    def __init__(self, load_config, client_creator, profile_name, cache=..., token_cache=..., token_provider=...) -> None:
        ...
    
    def load(self): # -> DeferredRefreshableCredentials | None:
        ...
    


