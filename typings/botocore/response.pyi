"""
This type stub file was generated by pyright.
"""

from io import IOBase

logger = ...
class StreamingBody(IOBase):
    """Wrapper class for an http response body.

    This provides a few additional conveniences that do not exist
    in the urllib3 model:

        * Set the timeout on the socket (i.e read() timeouts)
        * Auto validation of content length, if the amount of bytes
          we read does not match the content length, an exception
          is raised.

    """
    _DEFAULT_CHUNK_SIZE = ...
    def __init__(self, raw_stream, content_length) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def set_socket_timeout(self, timeout): # -> None:
        """Set the timeout seconds on the socket."""
        ...
    
    def readable(self): # -> Literal[False]:
        ...
    
    def read(self, amt=...):
        """Read at most amt bytes from the stream.

        If the amt argument is omitted, read all data.
        """
        ...
    
    def readlines(self):
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """Return an iterator to yield 1k chunks from the raw stream."""
        ...
    
    def __next__(self):
        """Return the next 1k chunk from the raw stream."""
        ...
    
    def __enter__(self): # -> Any:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    
    next = ...
    def iter_lines(self, chunk_size=..., keepends=...): # -> Generator[Any, Any, None]:
        """Return an iterator to yield lines from the raw stream.

        This is achieved by reading chunk of bytes (of size chunk_size) at a
        time from the raw stream, and then yielding lines from there.
        """
        ...
    
    def iter_chunks(self, chunk_size=...): # -> Generator[Any, Any, None]:
        """Return an iterator to yield chunks of chunk_size bytes from the raw
        stream.
        """
        ...
    
    def tell(self):
        ...
    
    def close(self): # -> None:
        """Close the underlying http response stream."""
        ...
    


def get_response(operation_model, http_response): # -> tuple[Any, Any]:
    ...

