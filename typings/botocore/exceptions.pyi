"""
This type stub file was generated by pyright.
"""

from botocore.vendored import requests
from botocore.vendored.requests.packages import urllib3

class BotoCoreError(Exception):
    """
    The base exception class for BotoCore exceptions.

    :ivar msg: The descriptive message associated with the error.
    """
    fmt = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Callable[..., Any], tuple[type[Self], None, dict[str, Any]]]:
        ...
    


class DataNotFoundError(BotoCoreError):
    """
    The data associated with a particular path could not be loaded.

    :ivar data_path: The data path that the user attempted to load.
    """
    fmt = ...


class UnknownServiceError(DataNotFoundError):
    """Raised when trying to load data for an unknown service.

    :ivar service_name: The name of the unknown service.

    """
    fmt = ...


class UnknownRegionError(BotoCoreError):
    """Raised when trying to load data for an unknown region.

    :ivar region_name: The name of the unknown region.

    """
    fmt = ...


class ApiVersionNotFoundError(BotoCoreError):
    """
    The data associated with either the API version or a compatible one
    could not be loaded.

    :ivar data_path: The data path that the user attempted to load.
    :ivar api_version: The API version that the user attempted to load.
    """
    fmt = ...


class HTTPClientError(BotoCoreError):
    fmt = ...
    def __init__(self, request=..., response=..., **kwargs) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Callable[..., Any], tuple[type[Self], tuple[Any | None, Any | None], dict[str, Any]]]:
        ...
    


class ConnectionError(BotoCoreError):
    fmt = ...


class InvalidIMDSEndpointError(BotoCoreError):
    fmt = ...


class InvalidIMDSEndpointModeError(BotoCoreError):
    fmt = ...


class EndpointConnectionError(ConnectionError):
    fmt = ...


class SSLError(ConnectionError, requests.exceptions.SSLError):
    fmt = ...


class ConnectionClosedError(HTTPClientError):
    fmt = ...


class ReadTimeoutError(HTTPClientError, requests.exceptions.ReadTimeout, urllib3.exceptions.ReadTimeoutError):
    fmt = ...


class ConnectTimeoutError(ConnectionError, requests.exceptions.ConnectTimeout):
    fmt = ...


class ProxyConnectionError(ConnectionError, requests.exceptions.ProxyError):
    fmt = ...


class ResponseStreamingError(HTTPClientError):
    fmt = ...


class NoCredentialsError(BotoCoreError):
    """
    No credentials could be found.
    """
    fmt = ...


class NoAuthTokenError(BotoCoreError):
    """
    No authorization token could be found.
    """
    fmt = ...


class TokenRetrievalError(BotoCoreError):
    """
    Error attempting to retrieve a token from a remote source.

    :ivar provider: The name of the token provider.
    :ivar error_msg: The msg explaining why the token could not be retrieved.

    """
    fmt = ...


class PartialCredentialsError(BotoCoreError):
    """
    Only partial credentials were found.

    :ivar cred_var: The missing credential variable name.

    """
    fmt = ...


class CredentialRetrievalError(BotoCoreError):
    """
    Error attempting to retrieve credentials from a remote source.

    :ivar provider: The name of the credential provider.
    :ivar error_msg: The msg explaining why credentials could not be
        retrieved.

    """
    fmt = ...


class UnknownSignatureVersionError(BotoCoreError):
    """
    Requested Signature Version is not known.

    :ivar signature_version: The name of the requested signature version.
    """
    fmt = ...


class ServiceNotInRegionError(BotoCoreError):
    """
    The service is not available in requested region.

    :ivar service_name: The name of the service.
    :ivar region_name: The name of the region.
    """
    fmt = ...


class BaseEndpointResolverError(BotoCoreError):
    """Base error for endpoint resolving errors.

    Should never be raised directly, but clients can catch
    this exception if they want to generically handle any errors
    during the endpoint resolution process.

    """
    ...


class NoRegionError(BaseEndpointResolverError):
    """No region was specified."""
    fmt = ...


class EndpointVariantError(BaseEndpointResolverError):
    """
    Could not construct modeled endpoint variant.

    :ivar error_msg: The message explaining why the modeled endpoint variant
        is unable to be constructed.

    """
    fmt = ...


class UnknownEndpointError(BaseEndpointResolverError, ValueError):
    """
    Could not construct an endpoint.

    :ivar service_name: The name of the service.
    :ivar region_name: The name of the region.
    """
    fmt = ...


class UnknownFIPSEndpointError(BaseEndpointResolverError):
    """
    Could not construct a FIPS endpoint.

    :ivar service_name: The name of the service.
    :ivar region_name: The name of the region.
    """
    fmt = ...


class ProfileNotFound(BotoCoreError):
    """
    The specified configuration profile was not found in the
    configuration file.

    :ivar profile: The name of the profile the user attempted to load.
    """
    fmt = ...


class ConfigParseError(BotoCoreError):
    """
    The configuration file could not be parsed.

    :ivar path: The path to the configuration file.
    """
    fmt = ...


class ConfigNotFound(BotoCoreError):
    """
    The specified configuration file could not be found.

    :ivar path: The path to the configuration file.
    """
    fmt = ...


class MissingParametersError(BotoCoreError):
    """
    One or more required parameters were not supplied.

    :ivar object: The object that has missing parameters.
        This can be an operation or a parameter (in the
        case of inner params).  The str() of this object
        will be used so it doesn't need to implement anything
        other than str().
    :ivar missing: The names of the missing parameters.
    """
    fmt = ...


class ValidationError(BotoCoreError):
    """
    An exception occurred validating parameters.

    Subclasses must accept a ``value`` and ``param``
    argument in their ``__init__``.

    :ivar value: The value that was being validated.
    :ivar param: The parameter that failed validation.
    :ivar type_name: The name of the underlying type.
    """
    fmt = ...


class ParamValidationError(BotoCoreError):
    fmt = ...


class UnknownKeyError(ValidationError):
    """
    Unknown key in a struct parameter.

    :ivar value: The value that was being checked.
    :ivar param: The name of the parameter.
    :ivar choices: The valid choices the value can be.
    """
    fmt = ...


class RangeError(ValidationError):
    """
    A parameter value was out of the valid range.

    :ivar value: The value that was being checked.
    :ivar param: The parameter that failed validation.
    :ivar min_value: The specified minimum value.
    :ivar max_value: The specified maximum value.
    """
    fmt = ...


class UnknownParameterError(ValidationError):
    """
    Unknown top level parameter.

    :ivar name: The name of the unknown parameter.
    :ivar operation: The name of the operation.
    :ivar choices: The valid choices the parameter name can be.
    """
    fmt = ...


class InvalidRegionError(ValidationError, ValueError):
    """
    Invalid region_name provided to client or resource.

    :ivar region_name: region_name that was being validated.
    """
    fmt = ...


class AliasConflictParameterError(ValidationError):
    """
    Error when an alias is provided for a parameter as well as the original.

    :ivar original: The name of the original parameter.
    :ivar alias: The name of the alias
    :ivar operation: The name of the operation.
    """
    fmt = ...


class UnknownServiceStyle(BotoCoreError):
    """
    Unknown style of service invocation.

    :ivar service_style: The style requested.
    """
    fmt = ...


class PaginationError(BotoCoreError):
    fmt = ...


class OperationNotPageableError(BotoCoreError):
    fmt = ...


class ChecksumError(BotoCoreError):
    """The expected checksum did not match the calculated checksum."""
    fmt = ...


class UnseekableStreamError(BotoCoreError):
    """Need to seek a stream, but stream does not support seeking."""
    fmt = ...


class WaiterError(BotoCoreError):
    """Waiter failed to reach desired state."""
    fmt = ...
    def __init__(self, name, reason, last_response) -> None:
        ...
    


class IncompleteReadError(BotoCoreError):
    """HTTP response did not return expected number of bytes."""
    fmt = ...


class InvalidExpressionError(BotoCoreError):
    """Expression is either invalid or too complex."""
    fmt = ...


class UnknownCredentialError(BotoCoreError):
    """Tried to insert before/after an unregistered credential type."""
    fmt = ...


class WaiterConfigError(BotoCoreError):
    """Error when processing waiter configuration."""
    fmt = ...


class UnknownClientMethodError(BotoCoreError):
    """Error when trying to access a method on a client that does not exist."""
    fmt = ...


class UnsupportedSignatureVersionError(BotoCoreError):
    """Error when trying to use an unsupported Signature Version."""
    fmt = ...


class ClientError(Exception):
    MSG_TEMPLATE = ...
    def __init__(self, error_response, operation_name) -> None:
        ...
    
    def __reduce__(self): # -> tuple[type[ClientError], tuple[Any, Any]]:
        ...
    


class EventStreamError(ClientError):
    ...


class UnsupportedTLSVersionWarning(Warning):
    """Warn when an openssl version that uses TLS 1.2 is required"""
    ...


class ImminentRemovalWarning(Warning):
    ...


class InvalidDNSNameError(BotoCoreError):
    """Error when virtual host path is forced on a non-DNS compatible bucket"""
    fmt = ...


class InvalidS3AddressingStyleError(BotoCoreError):
    """Error when an invalid path style is specified"""
    fmt = ...


class UnsupportedS3ArnError(BotoCoreError):
    """Error when S3 ARN provided to Bucket parameter is not supported"""
    fmt = ...


class UnsupportedS3ControlArnError(BotoCoreError):
    """Error when S3 ARN provided to S3 control parameter is not supported"""
    fmt = ...


class InvalidHostLabelError(BotoCoreError):
    """Error when an invalid host label would be bound to an endpoint"""
    fmt = ...


class UnsupportedOutpostResourceError(BotoCoreError):
    """Error when S3 Outpost ARN provided to Bucket parameter is incomplete"""
    fmt = ...


class UnsupportedS3ConfigurationError(BotoCoreError):
    """Error when an unsupported configuration is used with access-points"""
    fmt = ...


class UnsupportedS3AccesspointConfigurationError(BotoCoreError):
    """Error when an unsupported configuration is used with access-points"""
    fmt = ...


class InvalidEndpointDiscoveryConfigurationError(BotoCoreError):
    """Error when invalid value supplied for endpoint_discovery_enabled"""
    fmt = ...


class UnsupportedS3ControlConfigurationError(BotoCoreError):
    """Error when an unsupported configuration is used with S3 Control"""
    fmt = ...


class InvalidRetryConfigurationError(BotoCoreError):
    """Error when invalid retry configuration is specified"""
    fmt = ...


class InvalidMaxRetryAttemptsError(InvalidRetryConfigurationError):
    """Error when invalid retry configuration is specified"""
    fmt = ...


class InvalidRetryModeError(InvalidRetryConfigurationError):
    """Error when invalid retry mode configuration is specified"""
    fmt = ...


class InvalidS3UsEast1RegionalEndpointConfigError(BotoCoreError):
    """Error for invalid s3 us-east-1 regional endpoints configuration"""
    fmt = ...


class InvalidSTSRegionalEndpointsConfigError(BotoCoreError):
    """Error when invalid sts regional endpoints configuration is specified"""
    fmt = ...


class StubResponseError(BotoCoreError):
    fmt = ...


class StubAssertionError(StubResponseError, AssertionError):
    ...


class UnStubbedResponseError(StubResponseError):
    ...


class InvalidConfigError(BotoCoreError):
    fmt = ...


class InfiniteLoopConfigError(InvalidConfigError):
    fmt = ...


class RefreshWithMFAUnsupportedError(BotoCoreError):
    fmt = ...


class MD5UnavailableError(BotoCoreError):
    fmt = ...


class MissingDependencyException(BotoCoreError):
    fmt = ...


class MetadataRetrievalError(BotoCoreError):
    fmt = ...


class UndefinedModelAttributeError(Exception):
    ...


class MissingServiceIdError(UndefinedModelAttributeError):
    fmt = ...
    def __init__(self, **kwargs) -> None:
        ...
    


class SSOError(BotoCoreError):
    fmt = ...


class SSOTokenLoadError(SSOError):
    fmt = ...


class UnauthorizedSSOTokenError(SSOError):
    fmt = ...


class CapacityNotAvailableError(BotoCoreError):
    fmt = ...


class InvalidProxiesConfigError(BotoCoreError):
    fmt = ...


class InvalidDefaultsMode(BotoCoreError):
    fmt = ...


class AwsChunkedWrapperError(BotoCoreError):
    fmt = ...


class FlexibleChecksumError(BotoCoreError):
    fmt = ...


class InvalidEndpointConfigurationError(BotoCoreError):
    fmt = ...


class EndpointProviderError(BotoCoreError):
    """Base error for the EndpointProvider class"""
    fmt = ...


class EndpointResolutionError(EndpointProviderError):
    """Error when input parameters resolve to an error rule"""
    fmt = ...


class UnknownEndpointResolutionBuiltInName(EndpointProviderError):
    fmt = ...


