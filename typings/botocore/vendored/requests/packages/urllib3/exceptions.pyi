"""
This type stub file was generated by pyright.
"""

class HTTPError(Exception):
    "Base exception used by this module."
    ...


class HTTPWarning(Warning):
    "Base warning used by this module."
    ...


class PoolError(HTTPError):
    "Base exception for errors caused within a pool."
    def __init__(self, pool, message) -> None:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[None, None]]:
        ...
    


class RequestError(PoolError):
    "Base exception for PoolErrors that have associated URLs."
    def __init__(self, pool, url, message) -> None:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[None, Any, None]]:
        ...
    


class SSLError(HTTPError):
    "Raised when SSL certificate fails in an HTTPS connection."
    ...


class ProxyError(HTTPError):
    "Raised when the connection to a proxy fails."
    ...


class DecodeError(HTTPError):
    "Raised when automatic decoding based on Content-Type fails."
    ...


class ProtocolError(HTTPError):
    "Raised when something unexpected happens mid-request/response."
    ...


ConnectionError = ProtocolError
class MaxRetryError(RequestError):
    """Raised when the maximum number of retries is exceeded.

    :param pool: The connection pool
    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
    :param string url: The requested Url
    :param exceptions.Exception reason: The underlying error

    """
    def __init__(self, pool, url, reason=...) -> None:
        ...
    


class HostChangedError(RequestError):
    "Raised when an existing pool gets a request for a foreign host."
    def __init__(self, pool, url, retries=...) -> None:
        ...
    


class TimeoutStateError(HTTPError):
    """ Raised when passing an invalid state to a timeout """
    ...


class TimeoutError(HTTPError):
    """ Raised when a socket timeout error occurs.

    Catching this error will catch both :exc:`ReadTimeoutErrors
    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
    """
    ...


class ReadTimeoutError(TimeoutError, RequestError):
    "Raised when a socket timeout occurs while receiving data from a server"
    ...


class ConnectTimeoutError(TimeoutError):
    "Raised when a socket timeout occurs while connecting to a server"
    ...


class EmptyPoolError(PoolError):
    "Raised when a pool runs out of connections and no more are allowed."
    ...


class ClosedPoolError(PoolError):
    "Raised when a request enters a pool after the pool has been closed."
    ...


class LocationValueError(ValueError, HTTPError):
    "Raised when there is something wrong with a given URL input."
    ...


class LocationParseError(LocationValueError):
    "Raised when get_host or similar fails to parse the URL input."
    def __init__(self, location) -> None:
        ...
    


class ResponseError(HTTPError):
    "Used as a container for an error reason supplied in a MaxRetryError."
    GENERIC_ERROR = ...
    SPECIFIC_ERROR = ...


class SecurityWarning(HTTPWarning):
    "Warned when perfoming security reducing actions"
    ...


class InsecureRequestWarning(SecurityWarning):
    "Warned when making an unverified HTTPS request."
    ...


class SystemTimeWarning(SecurityWarning):
    "Warned when system time is suspected to be wrong"
    ...


class InsecurePlatformWarning(SecurityWarning):
    "Warned when certain SSL configuration is not available on a platform."
    ...


class ResponseNotChunked(ProtocolError, ValueError):
    "Response needs to be chunked in order to read it as chunks."
    ...


