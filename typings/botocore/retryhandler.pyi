"""
This type stub file was generated by pyright.
"""

logger = ...
EXCEPTION_MAP = ...
def delay_exponential(base, growth_factor, attempts):
    """Calculate time to sleep based on exponential function.

    The format is::

        base * growth_factor ^ (attempts - 1)

    If ``base`` is set to 'rand' then a random number between
    0 and 1 will be used as the base.
    Base must be greater than 0, otherwise a ValueError will be
    raised.

    """
    ...

def create_exponential_delay_function(base, growth_factor): # -> partial[Any]:
    """Create an exponential delay function based on the attempts.

    This is used so that you only have to pass it the attempts
    parameter to calculate the delay.

    """
    ...

def create_retry_handler(config, operation_name=...): # -> RetryHandler:
    ...

def create_retry_action_from_config(config, operation_name=...): # -> partial[Any] | None:
    ...

def create_checker_from_retry_config(config, operation_name=...): # -> MaxAttemptsDecorator:
    ...

class RetryHandler:
    """Retry handler.

    The retry handler takes two params, ``checker`` object
    and an ``action`` object.

    The ``checker`` object must be a callable object and based on a response
    and an attempt number, determines whether or not sufficient criteria for
    a retry has been met.  If this is the case then the ``action`` object
    (which also is a callable) determines what needs to happen in the event
    of a retry.

    """
    def __init__(self, checker, action) -> None:
        ...
    
    def __call__(self, attempts, response, caught_exception, **kwargs): # -> None:
        """Handler for a retry.

        Intended to be hooked up to an event handler (hence the **kwargs),
        this will process retries appropriately.

        """
        ...
    


class BaseChecker:
    """Base class for retry checkers.

    Each class is responsible for checking a single criteria that determines
    whether or not a retry should not happen.

    """
    def __call__(self, attempt_number, response, caught_exception): # -> None:
        """Determine if retry criteria matches.

        Note that either ``response`` is not None and ``caught_exception`` is
        None or ``response`` is None and ``caught_exception`` is not None.

        :type attempt_number: int
        :param attempt_number: The total number of times we've attempted
            to send the request.

        :param response: The HTTP response (if one was received).

        :type caught_exception: Exception
        :param caught_exception: Any exception that was caught while trying to
            send the HTTP response.

        :return: True, if the retry criteria matches (and therefore a retry
            should occur.  False if the criteria does not match.

        """
        ...
    


class MaxAttemptsDecorator(BaseChecker):
    """Allow retries up to a maximum number of attempts.

    This will pass through calls to the decorated retry checker, provided
    that the number of attempts does not exceed max_attempts.  It will
    also catch any retryable_exceptions passed in.  Once max_attempts has
    been exceeded, then False will be returned or the retryable_exceptions
    that was previously being caught will be raised.

    """
    def __init__(self, checker, max_attempts, retryable_exceptions=...) -> None:
        ...
    
    def __call__(self, attempt_number, response, caught_exception, retries_context): # -> bool:
        ...
    


class HTTPStatusCodeChecker(BaseChecker):
    def __init__(self, status_code) -> None:
        ...
    


class ServiceErrorCodeChecker(BaseChecker):
    def __init__(self, status_code, error_code) -> None:
        ...
    


class MultiChecker(BaseChecker):
    def __init__(self, checkers) -> None:
        ...
    
    def __call__(self, attempt_number, response, caught_exception): # -> Literal[False]:
        ...
    


class CRC32Checker(BaseChecker):
    def __init__(self, header) -> None:
        ...
    


class ExceptionRaiser(BaseChecker):
    """Raise any caught exceptions.

    This class will raise any non None ``caught_exception``.

    """
    ...


