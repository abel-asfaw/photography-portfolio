"""
This type stub file was generated by pyright.
"""

from botocore.utils import CachedProperty

_LEGACY_SIGNATURE_VERSIONS = ...
logger = ...
history_recorder = ...
class ClientCreator:
    """Creates client objects for a service."""
    def __init__(self, loader, endpoint_resolver, user_agent, event_emitter, retry_handler_factory, retry_config_translator, response_parser_factory=..., exceptions_factory=..., config_store=..., user_agent_creator=...) -> None:
        ...
    
    def create_client(self, service_name, region_name, is_secure=..., endpoint_url=..., verify=..., credentials=..., scoped_config=..., api_version=..., client_config=..., auth_token=...): # -> _:
        ...
    
    def create_client_class(self, service_name, api_version=...): # -> type[_]:
        ...
    


class ClientEndpointBridge:
    """Bridges endpoint data and client creation

    This class handles taking out the relevant arguments from the endpoint
    resolver and determining which values to use, taking into account any
    client configuration options and scope configuration options.

    This class also handles determining what, if any, region to use if no
    explicit region setting is provided. For example, Amazon S3 client will
    utilize "us-east-1" by default if no region can be resolved."""
    DEFAULT_ENDPOINT = ...
    _DUALSTACK_CUSTOMIZED_SERVICES = ...
    def __init__(self, endpoint_resolver, scoped_config=..., client_config=..., default_endpoint=..., service_signing_name=..., config_store=..., service_signature_version=...) -> None:
        ...
    
    def resolve(self, service_name, region_name=..., endpoint_url=..., is_secure=...): # -> dict[str, Any]:
        ...
    
    def resolver_uses_builtin_data(self):
        ...
    


class BaseClient:
    _PY_TO_OP_NAME = ...
    def __init__(self, serializer, endpoint, response_parser, event_emitter, request_signer, service_model, loader, client_config, partition, exceptions_factory, endpoint_ruleset_resolver=..., user_agent_creator=...) -> None:
        ...
    
    def __getattr__(self, item):
        ...
    
    def close(self): # -> None:
        """Closes underlying endpoint connections."""
        ...
    
    def get_paginator(self, operation_name): # -> _:
        """Create a paginator for an operation.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator("create_foo")``.

        :raise OperationNotPageableError: Raised if the operation is not
            pageable.  You can use the ``client.can_paginate`` method to
            check if an operation is pageable.

        :rtype: L{botocore.paginate.Paginator}
        :return: A paginator object.

        """
        ...
    
    def can_paginate(self, operation_name): # -> bool:
        """Check if an operation can be paginated.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator("create_foo")``.

        :return: ``True`` if the operation can be paginated,
            ``False`` otherwise.

        """
        ...
    
    def get_waiter(self, waiter_name): # -> _:
        """Returns an object that can wait for some condition.

        :type waiter_name: str
        :param waiter_name: The name of the waiter to get. See the waiters
            section of the service docs for a list of available waiters.

        :returns: The specified waiter object.
        :rtype: botocore.waiter.Waiter
        """
        ...
    
    @CachedProperty
    def waiter_names(self): # -> list[Any] | list[Any | str]:
        """Returns a list of all available waiters."""
        ...
    
    @property
    def exceptions(self):
        ...
    


class ClientMeta:
    """Holds additional client methods.

    This class holds additional information for clients.  It exists for
    two reasons:

        * To give advanced functionality to clients
        * To namespace additional client attributes from the operation
          names which are mapped to methods at runtime.  This avoids
          ever running into collisions with operation names.

    """
    def __init__(self, events, client_config, endpoint_url, service_model, method_to_api_mapping, partition) -> None:
        ...
    
    @property
    def service_model(self): # -> Any:
        ...
    
    @property
    def region_name(self):
        ...
    
    @property
    def endpoint_url(self): # -> Any:
        ...
    
    @property
    def config(self): # -> Any:
        ...
    
    @property
    def method_to_api_mapping(self): # -> Any:
        ...
    
    @property
    def partition(self): # -> Any:
        ...
    


