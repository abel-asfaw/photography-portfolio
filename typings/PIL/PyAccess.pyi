"""
This type stub file was generated by pyright.
"""

import sys

defs = ...
ffi = ...
logger = ...
class PyAccess:
    def __init__(self, img, readonly=...) -> None:
        ...
    
    def __setitem__(self, xy, color):
        """
        Modifies the pixel at x,y. The color is given as a single
        numerical value for single band images, and a tuple for
        multi-band images

        :param xy: The pixel coordinate, given as (x, y). See
           :ref:`coordinate-system`.
        :param color: The pixel value.
        """
        ...
    
    def __getitem__(self, xy):
        """
        Returns the pixel at x,y. The pixel is returned as a single
        value for single band images or a tuple for multiple band
        images

        :param xy: The pixel coordinate, given as (x, y). See
          :ref:`coordinate-system`.
        :returns: a pixel value for single band images, a tuple of
          pixel values for multiband images.
        """
        ...
    
    putpixel = ...
    getpixel = ...
    def check_xy(self, xy):
        ...
    


class _PyAccess32_2(PyAccess):
    """PA, LA, stored in first and last bytes of a 32 bit word"""
    def get_pixel(self, x, y): # -> tuple[Any, Any]:
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccess32_3(PyAccess):
    """RGB and friends, stored in the first three bytes of a 32 bit word"""
    def get_pixel(self, x, y): # -> tuple[Any, Any, Any]:
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccess32_4(PyAccess):
    """RGBA etc, all 4 bytes of a 32 bit word"""
    def get_pixel(self, x, y): # -> tuple[Any, Any, Any, Any]:
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccess8(PyAccess):
    """1, L, P, 8 bit images stored as uint8"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessI16_N(PyAccess):
    """I;16 access, native bitendian without conversion"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessI16_L(PyAccess):
    """I;16L access, with conversion"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessI16_B(PyAccess):
    """I;16B access, with conversion"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessI32_N(PyAccess):
    """Signed Int32 access, native endian"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessI32_Swap(PyAccess):
    """I;32L/B access, with byteswapping conversion"""
    def reverse(self, i):
        ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


class _PyAccessF(PyAccess):
    """32 bit float access"""
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color): # -> None:
        ...
    


mode_map = ...
if sys.byteorder == "little":
    ...
else:
    ...
def new(img, readonly=...): # -> None:
    ...

