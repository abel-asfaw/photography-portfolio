"""
This type stub file was generated by pyright.
"""

LUT_SIZE = ...
ROTATION_MATRIX = ...
MIRROR_MATRIX = ...
class LutBuilder:
    """A class for building a MorphLut from a descriptive language

    The input patterns is a list of a strings sequences like these::

        4:(...
           .1.
           111)->1

    (whitespaces including linebreaks are ignored). The option 4
    describes a series of symmetry operations (in this case a
    4-rotation), the pattern is described by:

    - . or X - Ignore
    - 1 - Pixel is on
    - 0 - Pixel is off

    The result of the operation is described after "->" string.

    The default is to return the current pixel value, which is
    returned if no other match is found.

    Operations:

    - 4 - 4 way rotation
    - N - Negate
    - 1 - Dummy op for no other operation (an op must always be given)
    - M - Mirroring

    Example::

        lb = LutBuilder(patterns = ["4:(... .1. 111)->1"])
        lut = lb.build_lut()

    """
    def __init__(self, patterns=..., op_name=...) -> None:
        ...
    
    def add_patterns(self, patterns): # -> None:
        ...
    
    def build_default_lut(self): # -> None:
        ...
    
    def get_lut(self): # -> bytearray | None:
        ...
    
    def build_lut(self): # -> bytearray | None:
        """Compile all patterns into a morphology lut.

        TBD :Build based on (file) morphlut:modify_lut
        """
        ...
    


class MorphOp:
    """A class for binary morphological operators"""
    def __init__(self, lut=..., op_name=..., patterns=...) -> None:
        """Create a binary morphological operator"""
        ...
    
    def apply(self, image): # -> tuple[Any, Image]:
        """Run a single morphological operation on an image

        Returns a tuple of the number of changed pixels and the
        morphed image"""
        ...
    
    def match(self, image):
        """Get a list of coordinates matching the morphological operation on
        an image.

        Returns a list of tuples of (x,y) coordinates
        of all matching pixels. See :ref:`coordinate-system`."""
        ...
    
    def get_on_pixels(self, image):
        """Get a list of all turned on pixels in a binary image

        Returns a list of tuples of (x,y) coordinates
        of all matching pixels. See :ref:`coordinate-system`."""
        ...
    
    def load_lut(self, filename): # -> None:
        """Load an operator from an mrl file"""
        ...
    
    def save_lut(self, filename): # -> None:
        """Save an operator to an mrl file"""
        ...
    
    def set_lut(self, lut): # -> None:
        """Set the lut from an external source"""
        ...
    


