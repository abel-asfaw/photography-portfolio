"""
This type stub file was generated by pyright.
"""

from . import ImageFile

enable_jpeg2k = ...
if enable_jpeg2k:
    ...
MAGIC = ...
HEADERSIZE = ...
def nextheader(fobj): # -> tuple[Any, ...]:
    ...

def read_32t(fobj, start_length, size): # -> dict[str, Image]:
    ...

def read_32(fobj, start_length, size): # -> dict[str, Image]:
    """
    Read a 32bit RGB icon resource.  Seems to be either uncompressed or
    an RLE packbits-like scheme.
    """
    ...

def read_mk(fobj, start_length, size): # -> dict[str, Image]:
    ...

def read_png_or_jpeg2000(fobj, start_length, size): # -> dict[str, PngImageFile] | dict[str, Any | Jpeg2KImageFile]:
    ...

class IcnsFile:
    SIZES = ...
    def __init__(self, fobj) -> None:
        """
        fobj is a file-like object as an icns resource
        """
        ...
    
    def itersizes(self): # -> list[Any]:
        ...
    
    def bestsize(self):
        ...
    
    def dataforsize(self, size): # -> dict[Any, Any]:
        """
        Get an icon resource as {channel: array}.  Note that
        the arrays are bottom-up like windows bitmaps and will likely
        need to be flipped or transposed in some way.
        """
        ...
    
    def getimage(self, size=...):
        ...
    


class IcnsImageFile(ImageFile.ImageFile):
    """
    PIL image support for Mac OS .icns files.
    Chooses the best resolution, but will possibly load
    a different size image if you mutate the size attribute
    before calling 'load'.

    The info dictionary has a key 'sizes' that is a list
    of sizes that the icns file has.
    """
    format = ...
    format_description = ...
    @property
    def size(self):
        ...
    
    @size.setter
    def size(self, value): # -> None:
        ...
    
    def load(self): # -> None:
        ...
    


if __name__ == "__main__":
    ...
