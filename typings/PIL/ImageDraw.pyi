"""
This type stub file was generated by pyright.
"""

class ImageDraw:
    font = ...
    def __init__(self, im, mode=...) -> None:
        """
        Create a drawing instance.

        :param im: The image to draw in.
        :param mode: Optional mode to use for color values.  For RGB
           images, this argument can be RGB or RGBA (to blend the
           drawing into the image).  For all other modes, this argument
           must be the same as the image mode.  If omitted, the mode
           defaults to the mode of the image.
        """
        ...
    
    def getfont(self): # -> FreeTypeFont | ImageFont:
        """
        Get the current default font.

        To set the default font for this ImageDraw instance::

            from PIL import ImageDraw, ImageFont
            draw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

        To set the default font for all future ImageDraw instances::

            from PIL import ImageDraw, ImageFont
            ImageDraw.ImageDraw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

        If the current default font is ``None``,
        it is initialized with ``ImageFont.load_default()``.

        :returns: An image font."""
        ...
    
    def arc(self, xy, start, end, fill=..., width=...): # -> None:
        """Draw an arc."""
        ...
    
    def bitmap(self, xy, bitmap, fill=...): # -> None:
        """Draw a bitmap."""
        ...
    
    def chord(self, xy, start, end, fill=..., outline=..., width=...): # -> None:
        """Draw a chord."""
        ...
    
    def ellipse(self, xy, fill=..., outline=..., width=...): # -> None:
        """Draw an ellipse."""
        ...
    
    def line(self, xy, fill=..., width=..., joint=...): # -> None:
        """Draw a line, or a connected sequence of line segments."""
        ...
    
    def shape(self, shape, fill=..., outline=...): # -> None:
        """(Experimental) Draw a shape."""
        ...
    
    def pieslice(self, xy, start, end, fill=..., outline=..., width=...): # -> None:
        """Draw a pieslice."""
        ...
    
    def point(self, xy, fill=...): # -> None:
        """Draw one or more individual pixels."""
        ...
    
    def polygon(self, xy, fill=..., outline=..., width=...): # -> None:
        """Draw a polygon."""
        ...
    
    def regular_polygon(self, bounding_circle, n_sides, rotation=..., fill=..., outline=..., width=...): # -> None:
        """Draw a regular polygon."""
        ...
    
    def rectangle(self, xy, fill=..., outline=..., width=...): # -> None:
        """Draw a rectangle."""
        ...
    
    def rounded_rectangle(self, xy, radius=..., fill=..., outline=..., width=..., *, corners=...):
        """Draw a rounded rectangle."""
        ...
    
    def text(self, xy, text, fill=..., font=..., anchor=..., spacing=..., align=..., direction=..., features=..., language=..., stroke_width=..., stroke_fill=..., embedded_color=..., *args, **kwargs): # -> None:
        """Draw text."""
        ...
    
    def multiline_text(self, xy, text, fill=..., font=..., anchor=..., spacing=..., align=..., direction=..., features=..., language=..., stroke_width=..., stroke_fill=..., embedded_color=..., *, font_size=...): # -> None:
        ...
    
    def textlength(self, text, font=..., direction=..., features=..., language=..., embedded_color=..., *, font_size=...):
        """Get the length of a given string, in pixels with 1/64 precision."""
        ...
    
    def textbbox(self, xy, text, font=..., anchor=..., spacing=..., align=..., direction=..., features=..., language=..., stroke_width=..., embedded_color=..., *, font_size=...): # -> tuple[Any, Any, Any, Any]:
        """Get the bounding box of a given string, in pixels."""
        ...
    
    def multiline_textbbox(self, xy, text, font=..., anchor=..., spacing=..., align=..., direction=..., features=..., language=..., stroke_width=..., embedded_color=..., *, font_size=...): # -> tuple[Any, Any, Any, Any]:
        ...
    


def Draw(im, mode=...): # -> ImageDraw:
    """
    A simple 2D drawing interface for PIL images.

    :param im: The image to draw in.
    :param mode: Optional mode to use for color values.  For RGB
       images, this argument can be RGB or RGBA (to blend the
       drawing into the image).  For all other modes, this argument
       must be the same as the image mode.  If omitted, the mode
       defaults to the mode of the image.
    """
    ...

Outline = ...
def getdraw(im=..., hints=...): # -> tuple[Draw | Any | None, Any]:
    """
    (Experimental) A more advanced 2D drawing interface for PIL images,
    based on the WCK interface.

    :param im: The image to draw in.
    :param hints: An optional list of hints.
    :returns: A (drawing context, drawing resource factory) tuple.
    """
    ...

def floodfill(image, xy, value, border=..., thresh=...): # -> None:
    """
    (experimental) Fills a bounded region with a given color.

    :param image: Target image.
    :param xy: Seed position (a 2-item coordinate tuple). See
        :ref:`coordinate-system`.
    :param value: Fill color.
    :param border: Optional border value.  If given, the region consists of
        pixels with a color different from the border color.  If not given,
        the region consists of pixels having the same color as the seed
        pixel.
    :param thresh: Optional threshold value which specifies a maximum
        tolerable difference of a pixel value from the 'background' in
        order for it to be replaced. Useful for filling regions of
        non-homogeneous, but similar, colors.
    """
    ...

