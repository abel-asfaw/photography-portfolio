"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from . import ImageFile

logger = ...
is_cid = ...
_MAGIC = ...
_MODES = ...
_simple_palette = ...
MAX_TEXT_CHUNK = ...
MAX_TEXT_MEMORY = ...
class Disposal(IntEnum):
    OP_NONE = ...
    OP_BACKGROUND = ...
    OP_PREVIOUS = ...


class Blend(IntEnum):
    OP_SOURCE = ...
    OP_OVER = ...


class ChunkStream:
    def __init__(self, fp) -> None:
        ...
    
    def read(self): # -> tuple[Any, Any, Any]:
        """Fetch a new chunk. Returns header information."""
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def push(self, cid, pos, length): # -> None:
        ...
    
    def call(self, cid, pos, length): # -> Any:
        """Call the appropriate chunk handler"""
        ...
    
    def crc(self, cid, data): # -> None:
        """Read and verify checksum"""
        ...
    
    def crc_skip(self, cid, data): # -> None:
        """Read checksum"""
        ...
    
    def verify(self, endchunk=...): # -> list[Any]:
        ...
    


class iTXt(str):
    """
    Subclass of string to allow iTXt chunks to look like strings while
    keeping their extra information

    """
    @staticmethod
    def __new__(cls, text, lang=..., tkey=...):
        """
        :param cls: the class to use when creating the instance
        :param text: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        """
        ...
    


class PngInfo:
    """
    PNG chunk container (for use with save(pnginfo=))

    """
    def __init__(self) -> None:
        ...
    
    def add(self, cid, data, after_idat=...): # -> None:
        """Appends an arbitrary chunk. Use with caution.

        :param cid: a byte string, 4 bytes long.
        :param data: a byte string of the encoded data
        :param after_idat: for use with private chunks. Whether the chunk
                           should be written after IDAT

        """
        ...
    
    def add_itxt(self, key, value, lang=..., tkey=..., zip=...): # -> None:
        """Appends an iTXt chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        :param zip: compression flag

        """
        ...
    
    def add_text(self, key, value, zip=...): # -> None:
        """Appends a text chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key, text or an
           :py:class:`PIL.PngImagePlugin.iTXt` instance
        :param zip: compression flag

        """
        ...
    


class PngStream(ChunkStream):
    def __init__(self, fp) -> None:
        ...
    
    def check_text_memory(self, chunklen): # -> None:
        ...
    
    def save_rewind(self): # -> None:
        ...
    
    def rewind(self): # -> None:
        ...
    
    def chunk_iCCP(self, pos, length): # -> bytes:
        ...
    
    def chunk_IHDR(self, pos, length): # -> bytes:
        ...
    
    def chunk_IDAT(self, pos, length):
        ...
    
    def chunk_IEND(self, pos, length):
        ...
    
    def chunk_PLTE(self, pos, length): # -> bytes:
        ...
    
    def chunk_tRNS(self, pos, length): # -> bytes:
        ...
    
    def chunk_gAMA(self, pos, length): # -> bytes:
        ...
    
    def chunk_cHRM(self, pos, length): # -> bytes:
        ...
    
    def chunk_sRGB(self, pos, length): # -> bytes:
        ...
    
    def chunk_pHYs(self, pos, length): # -> bytes:
        ...
    
    def chunk_tEXt(self, pos, length): # -> bytes:
        ...
    
    def chunk_zTXt(self, pos, length): # -> bytes:
        ...
    
    def chunk_iTXt(self, pos, length): # -> bytes:
        ...
    
    def chunk_eXIf(self, pos, length): # -> bytes:
        ...
    
    def chunk_acTL(self, pos, length): # -> bytes:
        ...
    
    def chunk_fcTL(self, pos, length): # -> bytes:
        ...
    
    def chunk_fdAT(self, pos, length): # -> bytes:
        ...
    


class PngImageFile(ImageFile.ImageFile):
    format = ...
    format_description = ...
    @property
    def text(self): # -> dict[Any, Any] | None:
        ...
    
    def verify(self): # -> None:
        """Verify PNG file"""
        ...
    
    def seek(self, frame): # -> None:
        ...
    
    def tell(self): # -> int:
        ...
    
    def load_prepare(self): # -> None:
        """internal: prepare to read PNG file"""
        ...
    
    def load_read(self, read_bytes): # -> Literal[b""]:
        """internal: read more image data"""
        ...
    
    def load_end(self): # -> None:
        """internal: finished reading image data"""
        ...
    
    def getexif(self): # -> Exif:
        ...
    
    def getxmp(self): # -> dict[Any, Any] | dict[str, str | dict[str, str] | None]:
        """
        Returns a dictionary containing the XMP tags.
        Requires defusedxml to be installed.

        :returns: XMP tags in a dictionary.
        """
        ...
    


_OUTMODES = ...
def putchunk(fp, cid, *data): # -> None:
    """Write a PNG chunk (including CRC field)"""
    ...

class _idat:
    def __init__(self, fp, chunk) -> None:
        ...
    
    def write(self, data): # -> None:
        ...
    


class _fdat:
    def __init__(self, fp, chunk, seq_num) -> None:
        ...
    
    def write(self, data): # -> None:
        ...
    


def getchunks(im, **params): # -> list[Any]:
    """Return a list of PNG chunks representing this image."""
    class collector:
        ...
    
    

