"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from . import ImageFile

class LoadingStrategy(IntEnum):
    """.. versionadded:: 9.1.0"""
    RGB_AFTER_FIRST = ...
    RGB_AFTER_DIFFERENT_PALETTE_ONLY = ...
    RGB_ALWAYS = ...


LOADING_STRATEGY = ...
class GifImageFile(ImageFile.ImageFile):
    format = ...
    format_description = ...
    _close_exclusive_fp_after_loading = ...
    global_palette = ...
    def data(self): # -> None:
        ...
    
    @property
    def n_frames(self): # -> int:
        ...
    
    @property
    def is_animated(self): # -> bool:
        ...
    
    def seek(self, frame): # -> None:
        ...
    
    def load_prepare(self): # -> None:
        ...
    
    def load_end(self): # -> None:
        ...
    
    def tell(self): # -> int:
        ...
    


RAWMODE = ...
def get_interlace(im): # -> Literal[0]:
    ...

_FORCE_OPTIMIZE = ...
def getheader(im, palette=..., info=...): # -> tuple[list[Any], list[Any] | None]:
    """
    Legacy Method to get Gif data from image.

    Warning:: May modify image data.

    :param im: Image object
    :param palette: bytes object containing the source palette, or ....
    :param info: encoderinfo
    :returns: tuple of(list of header items, optimized palette)

    """
    ...

def getdata(im, offset=..., **params): # -> list[Any]:
    """
    Legacy Method

    Return a list of strings representing this image.
    The first string is a local image header, the rest contains
    encoded image data.

    To specify duration, add the time in milliseconds,
    e.g. ``getdata(im_frame, duration=1000)``

    :param im: Image object
    :param offset: Tuple of (x, y) pixels. Defaults to (0, 0)
    :param \\**params: e.g. duration or other encoder info parameters
    :returns: List of bytes containing GIF encoded frame data

    """
    class Collector:
        ...
    
    

